package com.inc.haitran.five_elements.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig elementKindConfig;
    private final DaoConfig equipmentConfig;
    private final DaoConfig equipmentKindConfig;
    private final DaoConfig equipmentTypeConfig;
    private final DaoConfig propertiesKindConfig;


    private final ElementKindDao elementKindDao;
    private final EquipmentDao equipmentDao;
    private final EquipmentKindDao equipmentKindDao;
    private final EquipmentTypeDao equipmentTypeDao;
    private final PropertiesKindDao propertiesKindDao;


    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        elementKindConfig = daoConfigMap.get(ElementKindDao.class).clone();
        elementKindConfig.initIdentityScope(type);
        elementKindDao = new ElementKindDao(elementKindConfig, this);
        registerDao(ElementKind.class, elementKindDao);


        equipmentKindConfig = daoConfigMap.get(EquipmentKindDao.class).clone();
        equipmentKindConfig.initIdentityScope(type);
        equipmentKindDao = new EquipmentKindDao(equipmentKindConfig, this);
        registerDao(EquipmentKind.class, equipmentKindDao);

        equipmentTypeConfig = daoConfigMap.get(EquipmentTypeDao.class).clone();
        equipmentTypeConfig.initIdentityScope(type);
        equipmentTypeDao = new EquipmentTypeDao(equipmentTypeConfig, this);
        registerDao(EquipmentType.class, equipmentTypeDao);

        propertiesKindConfig = daoConfigMap.get(PropertiesKindDao.class).clone();
        propertiesKindConfig.initIdentityScope(type);
        propertiesKindDao = new PropertiesKindDao(propertiesKindConfig, this);
        registerDao(PropertiesKind.class, propertiesKindDao);

        equipmentConfig = daoConfigMap.get(EquipmentDao.class).clone();
        equipmentConfig.initIdentityScope(type);
        equipmentDao = new EquipmentDao(equipmentConfig, this);
        registerDao(Equipment.class, equipmentDao);

    }
    
    public void clear() {
        elementKindConfig.getIdentityScope().clear();
        equipmentKindConfig.getIdentityScope().clear();
        equipmentTypeConfig.getIdentityScope().clear();
        propertiesKindConfig.getIdentityScope().clear();
        equipmentConfig.getIdentityScope().clear();

    }

    public ElementKindDao getElementKindDao() {
        return elementKindDao;
    }
    public EquipmentDao getEquipmentDao() {
        return equipmentDao;
    }
    public EquipmentKindDao getEquipmentKindDao() {
        return equipmentKindDao;
    }
    public EquipmentTypeDao getEquipmentTypeDao() {
        return equipmentTypeDao;
    }
    public PropertiesKindDao getPropertiesKindDao() {
        return propertiesKindDao;
    }

}
