package com.inc.haitran.five_elements.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ElementKindDao.createTable(db, ifNotExists);
        EquipmentKindDao.createTable(db, ifNotExists);
        EquipmentTypeDao.createTable(db, ifNotExists);
        PropertiesKindDao.createTable(db, ifNotExists);
        EquipmentDao.createTable(db, ifNotExists);

    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ElementKindDao.dropTable(db, ifExists);
        EquipmentKindDao.dropTable(db, ifExists);
        EquipmentTypeDao.dropTable(db, ifExists);
        PropertiesKindDao.dropTable(db, ifExists);
        EquipmentDao.dropTable(db, ifExists);

    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {
        private String DB_NAME = "";
        private Context context;
//        SQLiteDatabase myDataBase;
        public OpenHelper(Context context, String name, CursorFactory factory) throws IOException{
            super(context, name, factory, SCHEMA_VERSION);
            DB_NAME = name;
            this.context = context;
            boolean dbexist = checkdatabase();
            if (!dbexist) {
                createdatabase();
            }
//            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, true);
        }
        private void copydatabase() throws IOException {
            //Open your local db as the input stream
            InputStream myinput = context.getAssets().open(DB_NAME);

            // Path to the just created empty db
            String outfilename = context.getDatabasePath(DB_NAME).getPath();

            //Open the empty db as the output stream
            OutputStream myoutput = new FileOutputStream(outfilename);

            // transfer byte to inputfile to outputfile
            byte[] buffer = new byte[1024];
            int length;
            while ((length = myinput.read(buffer))>0) {
                myoutput.write(buffer,0,length);
            }

            //Close the streams
            myoutput.flush();
            myoutput.close();
            myinput.close();
        }
        public void createdatabase() throws IOException {
            boolean dbexist = checkdatabase();
            if(dbexist) {
                System.out.println(" Database exists.");
            } else {
                this.getReadableDatabase();
                try {
                    copydatabase();
                } catch(IOException e) {
                    throw new Error("Error copying database");
                }
            }
        }

        private boolean checkdatabase() {

            boolean checkdb = false;
            try {
                File dbfile = context.getDatabasePath(DB_NAME);
                checkdb = dbfile.exists();
            } catch(SQLiteException e) {
                System.out.println("Database doesn't exist");
            }
            return checkdb;
        }
//        public void opendatabase() throws SQLException {
//            //Open the database
//            String mypath = context.getDatabasePath(DB_NAME).getPath();
//            myDataBase = SQLiteDatabase.openDatabase(mypath, null, SQLiteDatabase.OPEN_READWRITE);
//        }
//
//        public synchronized void close() {
//            if(myDataBase != null) {
//                myDataBase.close();
//            }
//            super.close();
//        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory)throws IOException {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ElementKindDao.class);
        registerDaoClass(EquipmentKindDao.class);
        registerDaoClass(EquipmentTypeDao.class);
        registerDaoClass(PropertiesKindDao.class);
        registerDaoClass(EquipmentDao.class);

    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
